module Vex.CLI.Help where

import Data.Version (showVersion)
import Paths_Vex (version)

displayGeneral :: IO ()
displayGeneral =
  putStrLn . unlines $
    [ "Usage: vex [options] file...",
      "Options:",
      "  --help                   Display this information.",
      "  --help={optimizers|warnings|target|compiler}[,...]",
      "                           Display help on specific option categories.",
      "  --version                Display compiler version information.",
      "  repl                     Launch the interactive Vex REPL (Read-Eval-Print Loop).",
      "",
      "Report bugs at <https://github.com/PeterGriffinSr/Vex/issues>"
    ]

displayOptimizersHelp :: IO ()
displayOptimizersHelp =
  putStrLn . unlines $
    [ "Optimization Options:",
      "  -O0                      Disable all optimizations (default).",
      "  -O1                      Enable basic optimizations.",
      "  -O2                      Enable additional optimizations.",
      "  -O3                      Enable full optimizations, including inlining.",
      "  -Os                      Optimize for size.",
      "  -Ofast                   Enable aggressive optimizations that may break strict standards compliance."
    ]

displayWarningsHelp :: IO ()
displayWarningsHelp =
  putStrLn . unlines $
    [ "Warning Control Options:",
      "  -Wall                   Enable most warnings.",
      "  -Werror                 Treat warnings as errors.",
      "  -Wno-unused             Disable warnings for unused variables or functions.",
      "  -Wextra                 Enable extra warning checks."
    ]

displayTargetHelp :: IO ()
displayTargetHelp =
  putStrLn . unlines $
    [ "Target-Specific Options:",
      "  --target=<platform>     Specify the target platform (e.g., linux, wasm, arm).",
      "  --arch=<arch>           Specify the target architecture (e.g., x86_64, arm64).",
      "  --emit-llvm             Output LLVM IR instead of native code."
    ]

displayCompilerHelp :: IO ()
displayCompilerHelp =
  putStrLn . unlines $
    [ "Compiler Control Options:",
      "  -save-temps             Do not delete intermediate files (e.g., .ll, .s).",
      "  -S                      Compile only; do not assemble or link.",
      "  -c                      Compile and assemble, but do not link.",
      "  -o <file>               Place the output into <file>.",
      "  --emit-ast              Output the parsed AST instead of compiling.",
      "  --emit-ir               Output the intermediate representation (IR).",
      "  --emit-tokens           Output the tokens generated by the lexer."
    ]

displayVersion :: IO ()
displayVersion = putStrLn $ "Vex Compiler version: " ++ showVersion version
